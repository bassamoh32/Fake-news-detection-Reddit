version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - RedditPipeline

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - RedditPipeline

  spark-master:
    image: bitnami/spark:latest
    hostname: spark-master
    container_name: spark-master
    command: ["spark-class", "org.apache.spark.deploy.master.Master"]
    ports:
      - "7070:7070"
      - "8081:8080"
    networks:
      - RedditPipeline
  

  spark-worker:
    image: bitnami/spark:latest
    hostname: spark-worker
    container_name: spark-worker
    command: ["spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077"]
    depends_on:
      - spark-master
    networks:
      - RedditPipeline

  kafka-producer:
    build:
      context: .
      dockerfile: ./kafka/Dockerfile
    hostname: kafka-producer
    container_name: kafka-producer
    depends_on:
      - kafka
    networks:
      - RedditPipeline

  spark-streaming:
    build:
      context: .
      dockerfile: ./spark/Dockerfile
    hostname: spark-streaming
    container_name: spark-streaming
    depends_on:
      - spark-master
      - kafka
      - cassandra
    volumes:
      - ./configuration:/app/configuration  # Keep only config volumes
      - ./cassandra_utils:/app/cassandra_utils
    networks:
      - RedditPipeline
    

  cassandra:
    image: cassandra:latest
    hostname: cassandra
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
      - CASSANDRA_RPC_ADDRESS=0.0.0.0
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./configuration:/app/configuration
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'DESCRIBE KEYSPACES'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - RedditPipeline
  classifier:
    build:
      context: .
      dockerfile: ./model/Dockerfile  # Changed to use the main Dockerfile
    depends_on:
      cassandra:
         condition: service_healthy
    volumes:
      - ./configuration:/app/configuration
      - ./model:/app/model  # Add model volume
      - ./spark:/app/spark  # Add spark volume
      - ./cassandra_utils:/app/cassandra_utils
    environment:
      - PYTHONPATH=/app  # Ensure Python can find your modules
    networks:
      - RedditPipeline
    restart: always
  # Add to docker-compose.yml
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - RedditPipeline
    depends_on:
      - cassandra

  airflow-webserver:
    image: apache/airflow:2.5.1
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./model:/app/model
      - ./kafka:/app/kafka
      - ./spark:/app/spark
      - ./configuration:/app/configuration
    ports:
      - "8080:8080"
    command: >
      bash -c "
      until airflow db check; do sleep 5; done &&
      airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
      airflow webserver
      "
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - RedditPipeline

  airflow-scheduler:
    image: apache/airflow:2.5.1
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./model:/app/model
    command: >
      bash -c "
      until airflow db check; do sleep 5; done &&
      airflow scheduler
      "
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-scheduler.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - RedditPipeline

  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - RedditPipeline

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - RedditPipeline
volumes:
  postgres-db-volume: 
  cassandra-data: 
networks:
  RedditPipeline:
